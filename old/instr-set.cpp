#include <iostream>
#include <string>
#include <stdint.h>
#include <map>
#include <list>
#include "instr-set.h"

using namespace std;

regMap reg_no = {
	{0x0, ""}
};

regMap reg_r = {
	{0x0, "V"},
	{0x1, "A"},
	{0x2, "B"},
	{0x3, "C"},
	{0x4, "D"},
	{0x5, "E"},
	{0x6, "H"},
	{0x7, "L"}
};

regMap reg_r1 = {
	{0x0, "EAH"},
	{0x1, "EAL"},
	{0x2, "B"},
	{0x3, "C"},
	{0x4, "D"},
	{0x5, "E"},
	{0x6, "H"},
	{0x7, "L"}
};
	
regMap reg_r2 = {
	{0x1, "A"},
	{0x2, "B"},
	{0x3, "C"}
};

regMap reg_rpa = {
	{0x1, "{BC}"},
	{0x2, "{DE}"},
	{0x3, "{HL}"},
	{0x4, "{DE}+"},
	{0x5, "{HL}+"},
	{0x6, "{DE}-"},
	{0x7, "{HL}-"}
};

regMap reg_rpa1 = {
	{0x1, "{BC}"},
	{0x2, "{DE}"},
	{0x3, "{HL}"}
};

regMap reg_rpa2 = {
	{0x1, "{BC}"},
	{0x2, "{DE}"},
	{0x3, "{HL}"},
	{0x4, "{DE}+"},
	{0x5, "{HL}+"},
	{0x6, "{DE}-"},
	{0x7, "{DE}+"},
	{0xB, "{DE+$data}"},
	{0xC, "{HL+A}"},
	{0xD, "{HL+B}"},
	{0xE, "{HL+EA}"},
	{0xF, "{HL+$data}"}
};

regMap reg_rpa3 = {
	{0x2, "{DE}"},
	{0x3, "{HL}"},
	{0x4, "{DE}++"},
	{0x5, "{HL}++"},
	{0xB, "{DE+$data}"},
	{0xC, "{HL+A}"},
	{0xD, "{HL+B}"},
	{0xE, "{HL+EA}"},
	{0xF, "{HL+$data}"}
};

regMap reg_sr = {
	{0x00, "PA"},
	{0x01, "PB"},
	{0x02, "PC"},
	{0x03, "PD"},
	{0x05, "PF"},
	{0x06, "MKH"},
	{0x07, "MKL"},
	{0x08, "ANM"},
	{0x09, "SMH"},
	{0x0A, "SML"},
	{0x0B, "EOM"},
	{0x0C, "ETMM"},
	{0x0D, "TMM"},
	{0x10, "MM"},
	{0x11, "MCC"},
	{0x12, "MA"},
	{0x13, "MB"},
	{0x14, "MC"},
	{0x17, "MF"},
	{0x18, "TXB"},
	{0x1A, "TM0"},
	{0x1B, "TM1"},
	{0x28, "ZCM"}	
};

regMap reg_sr1 = {
	{0x00, "PA"},
	{0x01, "PB"},
	{0x02, "PC"},
	{0x03, "PD"},
	{0x05, "PF"},
	{0x06, "MKH"},
	{0x07, "MKL"},
	{0x08, "ANM"},
	{0x09, "SMH"},
	{0x0B, "EOM"},
	{0x0D, "TMM"},
	{0x19, "RXB"},
	{0x20, "CR0"},
	{0x21, "CR1"},
	{0x22, "CR2"},	
	{0x23, "CR3"}	
};

regMap reg_sr2 = {
	{0x00, "PA"},
	{0x01, "PB"},
	{0x02, "PC"},
	{0x03, "PD"},
	{0x05, "PF"},
	{0x06, "MKH"},
	{0x07, "MKL"},
	{0x08, "ANM"},
	{0x09, "SMH"},
	{0x0B, "EOM"},
	{0x0D, "TMM"}
};

regMap reg_sr3 = {
	{0x0, "ETM0"},
	{0x1, "ETM1"}
};

regMap reg_sr4 = {
	{0x0, "ECNT"},
	{0x1, "ECPT"}
};

regMap reg_rp = {
	{0x0, "SP"},
	{0x1, "BC"},
	{0x2, "DE"},
	{0x3, "HL"}
};

regMap reg_rp1 = {
	{0x0, "VA"},
	{0x1, "BC"},
	{0x2, "DE"},
	{0x3, "HL"},
	{0x4, "EA"}
};

regMap reg_rp2 = {
	{0x0, "SP"},
	{0x1, "BC"},
	{0x2, "DE"},
	{0x3, "HL"},
	{0x4, "EA"}
};

regMap reg_rp3 = {
	{0x1, "BC"},
	{0x2, "DE"},
	{0x3, "HL"}
};

regMap reg_f = {
	{0x2, "CY"},
	{0x3, "HC"},
	{0x4, "Z"}
};

regMap reg_irf = {
	{0x00, "NMI"},
	{0x01, "FT0"},
	{0x02, "FT1"},
	{0x03, "F1"},
	{0x04, "F2"},
	{0x05, "FE0"},
	{0x06, "FE1"},
	{0x07, "FEIN"},
	{0x08, "FAD"},
	{0x09, "FSR"},
	{0x0A, "FST"},
	{0x0B, "ER"},
	{0x0C, "OV"},
	{0x10, "AN4"},
	{0x11, "AN5"},
	{0x12, "AN6"},
	{0x13, "AN7"},
	{0x14, "SB"}	
};


InstrGroup instructionSet = {
	{1, 0x18,0x00, NO_ARGS, &reg_r1, 0x07,0x00,"MOV $reg, A"},
	{1, 0x08,0x00, NO_ARGS, &reg_r1, 0x07,0x00,"MOV A, $reg"},
	{2, 0x4D,0xC0, NO_ARGS, &reg_sr, 0x00,0x3F,"MOV $reg, A"},
	{2, 0x4C,0xC0, NO_ARGS, &reg_sr1, 0x00,0x3F,"MOV A, $reg"},
	{4, 0x70,0x68, WORD_3_4_ADDR, &reg_r, 0x00,0x07,"MOV $reg, $addr"},
	{4, 0x70,0x78, WORD_3_4_ADDR, &reg_r, 0x00,0x07,"MOV $addr, $reg"},
	{2, 0x68,0x00, BYTE_2_DATA, &reg_r, 0x07,0x00,"MVI $reg, $data"},
	{3, 0x64,0x00, BYTE_3_DATA, &reg_sr2, 0x00,0x87,"MVI $reg, $data"},
	{3, 0x71,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00,0x00,"MVIW $offset, $data"},
	{2, 0x48,0x00, BYTE_2_DATA, &reg_rpa1, 0x03,0x00,"MVIX $reg, $data"},
	{2, 0x63,0x00, BYTE_2_OFFSET, &reg_no, 0x00,0x00,"STAW $offset"},
	{2, 0x01,0x00, BYTE_2_OFFSET, &reg_no, 0x00,0x00,"LDAW $offset"},	
	{1, 0x38,0x00, BYTE_2_DATA_OPT, &reg_rpa2, 0x87,0x00,"STAX $reg"},
	{1, 0x28,0x00, BYTE_2_DATA_OPT, &reg_rpa2, 0x87,0x00,"LDAX $reg"},
	{1, 0x11,0x00, NO_ARGS, &reg_no, 0x00,0x00,"EXX"},
	{1, 0x10,0x00, NO_ARGS, &reg_no, 0x00,0x00,"EXA"},
	{1, 0x50,0x00, NO_ARGS, &reg_no, 0x00,0x00,"EXH"},
	{1, 0x31,0x00, NO_ARGS, &reg_no, 0x00,0x00,"BLOCK"},
	{1, 0xB4,0x00, NO_ARGS, &reg_rp3, 0x03,0x00,"DMOV $reg, EA"},
	{1, 0xA4,0x00, NO_ARGS, &reg_rp3, 0x03,0x00,"DMOV EA, $reg"},
	{2, 0x48,0xD2, NO_ARGS, &reg_sr3, 0x00,0x01,"DMOV $reg, EA"},  
	{2, 0x48,0xC0, NO_ARGS, &reg_sr4, 0x00,0x01,"DMOV EA, $reg"},
	{4, 0x70,0x1E, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "SBCD $addr"},
	{4, 0x70,0x2E, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "SBED $addr"},
	{4, 0x70,0x3E, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "SHLD $addr"},
	{4, 0x70,0x0E, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "SSPD $addr"},
	{2, 0x48,0x90, BYTE_3_DATA_OPT, &reg_rpa3, 0x00, 0x0F, "STEAX $reg"},
	{4, 0x70,0x1F, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "LBCD $addr"},
	{4, 0x70,0x2F, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "LBED $addr"},
	{4, 0x70,0x3F, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "LHLD $addr"},
	{4, 0x70,0x0F, WORD_3_4_ADDR, &reg_no, 0x00, 0x00, "LSPD $addr"},
	{2, 0x48,0x80, BYTE_3_DATA_OPT, &reg_rpa3, 0x00, 0x0F, "LDEAX $reg"},
	{1, 0xB0,0x00, NO_ARGS, &reg_rp1, 0x07, 0x00, "PUSH $reg"},
	{1, 0xA0,0x00, NO_ARGS, &reg_rp1, 0x07, 0x00, "POP $reg"},
	{3, 0x04,0x00, WORD_2_3, &reg_rp2, 0x70, 0x00, "LXI $reg, $word"},
	{2, 0x48,0xA8, NO_ARGS, &reg_no, 0x00, 0x00, "TABLE"},
	{2, 0x60,0xC0, NO_ARGS, &reg_r, 0x00, 0x07, "ADD A, $reg"},
	{2, 0x60,0x40, NO_ARGS, &reg_r, 0x00, 0x07, "ADD $reg, A"},
	{2, 0x60,0xD0, NO_ARGS, &reg_r, 0x00, 0x07, "ADC A, $reg"},
	{2, 0x60,0x50, NO_ARGS, &reg_r, 0x00, 0x07, "ADC $reg, A"},
	{2, 0x60,0xA0, NO_ARGS, &reg_r, 0x00, 0x07, "ADDNC A, $reg"},
	{2, 0x60,0x20, NO_ARGS, &reg_r, 0x00, 0x07, "ADDNC $reg, A"},	
	{2, 0x60,0xE0, NO_ARGS, &reg_r, 0x00, 0x07, "SUB A, $reg"},
	{2, 0x60,0x60, NO_ARGS, &reg_r, 0x00, 0x07, "SUB $reg, A"},	
	{2, 0x60,0xF0, NO_ARGS, &reg_r, 0x00, 0x07, "SBB A, $reg"},
	{2, 0x60,0x70, NO_ARGS, &reg_r, 0x00, 0x07, "SBB $reg, A"},
	{2, 0x60,0xB0, NO_ARGS, &reg_r, 0x00, 0x07, "SUBNB A, $reg"},
	{2, 0x60,0x30, NO_ARGS, &reg_r, 0x00, 0x07, "SUBNB $reg, A"},
	{2, 0x60,0x88, NO_ARGS, &reg_r, 0x00, 0x07, "ANA A, $reg"},
	{2, 0x60,0x08, NO_ARGS, &reg_r, 0x00, 0x07, "ANA $reg, A"},	
	{2, 0x60,0x98, NO_ARGS, &reg_r, 0x00, 0x07, "ORA A, $reg"},
	{2, 0x60,0x18, NO_ARGS, &reg_r, 0x00, 0x07, "ORA $reg, A"},		
	{2, 0x60,0x90, NO_ARGS, &reg_r, 0x00, 0x07, "XRA A, $reg"},
	{2, 0x60,0x10, NO_ARGS, &reg_r, 0x00, 0x07, "XRA $reg, A"},	
	{2, 0x60,0xA8, NO_ARGS, &reg_r, 0x00, 0x07, "GTA A, $reg"},
	{2, 0x60,0x28, NO_ARGS, &reg_r, 0x00, 0x07, "GTA $reg, A"},		
	{2, 0x60,0xB8, NO_ARGS, &reg_r, 0x00, 0x07, "LTA A, $reg"},
	{2, 0x60,0x38, NO_ARGS, &reg_r, 0x00, 0x07, "LTA $reg, A"},		
	{2, 0x60,0xE8, NO_ARGS, &reg_r, 0x00, 0x07, "NEA A, $reg"},
	{2, 0x60,0x68, NO_ARGS, &reg_r, 0x00, 0x07, "NEA $reg, A"},		
	{2, 0x60,0xF8, NO_ARGS, &reg_r, 0x00, 0x07, "EQA A, $reg"},
	{2, 0x60,0x78, NO_ARGS, &reg_r, 0x00, 0x07, "EQA $reg, A"},		
	{2, 0x60,0xC8, NO_ARGS, &reg_r, 0x00, 0x07, "ONA A, $reg"},
	{2, 0x60,0xD8, NO_ARGS, &reg_r, 0x00, 0x07, "OFFA A, $reg"},
	{2, 0x70,0xC0, NO_ARGS, &reg_rpa, 0x00, 0x07, "ADDX $reg"},
	{2, 0x70,0xD0, NO_ARGS, &reg_rpa, 0x00, 0x07, "ADCX $reg"},
	{2, 0x70,0xA0, NO_ARGS, &reg_rpa, 0x00, 0x07, "ADDNCX $reg"},
	{2, 0x70,0xE0, NO_ARGS, &reg_rpa, 0x00, 0x07, "SUBX $reg"},
	{2, 0x70,0xF0, NO_ARGS, &reg_rpa, 0x00, 0x07, "SBBX $reg"},
	{2, 0x70,0xB0, NO_ARGS, &reg_rpa, 0x00, 0x07, "SUBNBX $reg"},
	{2, 0x70,0x88, NO_ARGS, &reg_rpa, 0x00, 0x07, "ANAX $reg"},	
	{2, 0x70,0x98, NO_ARGS, &reg_rpa, 0x00, 0x07, "ORAX $reg"},	
	{2, 0x70,0x90, NO_ARGS, &reg_rpa, 0x00, 0x07, "XRAX $reg"},	
	{2, 0x70,0xA8, NO_ARGS, &reg_rpa, 0x00, 0x07, "GTAX $reg"},	
	{2, 0x70,0xB8, NO_ARGS, &reg_rpa, 0x00, 0x07, "LTAX $reg"},	
	{2, 0x70,0xE8, NO_ARGS, &reg_rpa, 0x00, 0x07, "NEAX $reg"},	
	{2, 0x70,0xF8, NO_ARGS, &reg_rpa, 0x00, 0x07, "EQAX $reg"},	
	{2, 0x70,0xC8, NO_ARGS, &reg_rpa, 0x00, 0x07, "ONAX $reg"},	
	{2, 0x70,0xD8, NO_ARGS, &reg_rpa, 0x00, 0x07, "OFFAX $reg"},	
	{2, 0x46,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "ADDI A, $data"},	
	{3, 0x74,0x40, BYTE_3_DATA, &reg_r, 0x00, 0x07, "ADDI $reg, $data"},	
	{3, 0x64,0x40, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "ADDI $reg, $data"},	
	{2, 0x56,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "ADCI A, $data"},	
	{3, 0x74,0x50, BYTE_3_DATA, &reg_r, 0x00, 0x07, "ADCI $reg, $data"},	
	{3, 0x64,0x50, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "ADCI $reg, $data"},	
	{2, 0x26,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "ADINC A, $data"},	
	{3, 0x74,0x20, BYTE_3_DATA, &reg_r, 0x00, 0x07, "ADINC $reg, $data"},	
	{3, 0x64,0x20, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "ADINC $reg, $data"},	
	{2, 0x66,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "SUI A, $data"},	
	{3, 0x74,0x60, BYTE_3_DATA, &reg_r, 0x00, 0x07, "SUI $reg, $data"},	
	{3, 0x64,0x60, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "SUI $reg, $data"},	
	{2, 0x76,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "SBI A, $data"},	
	{3, 0x74,0x70, BYTE_3_DATA, &reg_r, 0x00, 0x07, "SBI $reg, $data"},	
	{3, 0x64,0x70, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "SBI $reg, $data"},	
	{2, 0x36,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "SUINB A, $data"},	
	{3, 0x74,0x30, BYTE_3_DATA, &reg_r, 0x00, 0x07, "SUINB $reg, $data"},	
	{3, 0x64,0x30, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "SUINB $reg, $data"},	
	{2, 0x07,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "ANI A, $data"},	
	{3, 0x74,0x08, BYTE_3_DATA, &reg_r, 0x00, 0x07, "ANI $reg, $data"},	
	{3, 0x64,0x08, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "ANI $reg, $data"},	
	{2, 0x17,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "ORI A, $data"},	
	{3, 0x74,0x18, BYTE_3_DATA, &reg_r, 0x00, 0x07, "ORI $reg, $data"},	
	{3, 0x64,0x18, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "ORI $reg, $data"},	
	{2, 0x16,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "XRI A, $data"},	
	{3, 0x74,0x10, BYTE_3_DATA, &reg_r, 0x00, 0x07, "XRI $reg, $data"},	
	{3, 0x64,0x10, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "XRI $reg, $data"},
	{2, 0x27,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "GTI A, $data"},	
	{3, 0x74,0x28, BYTE_3_DATA, &reg_r, 0x00, 0x07, "GTI $reg, $data"},	
	{3, 0x64,0x28, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "GTI $reg, $data"},
	{2, 0x37,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "LTI A, $data"},	
	{3, 0x74,0x38, BYTE_3_DATA, &reg_r, 0x00, 0x07, "LTI $reg, $data"},	
	{3, 0x64,0x03, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "LTI $reg, $data"},
	{2, 0x67,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "NEI A, $data"},	
	{3, 0x74,0x68, BYTE_3_DATA, &reg_r, 0x00, 0x07, "NEI $reg, $data"},	
	{3, 0x64,0x68, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "NEI $reg, $data"},
	{2, 0x77,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "EQI A, $data"},	
	{3, 0x74,0x78, BYTE_3_DATA, &reg_r, 0x00, 0x07, "EQI $reg, $data"},	
	{3, 0x64,0x78, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "EQI $reg, $data"},	
	{2, 0x47,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "ONI A, $data"},	
	{3, 0x74,0x48, BYTE_3_DATA, &reg_r, 0x00, 0x07, "ONI $reg, $data"},	
	{3, 0x64,0x48, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "ONI $reg, $data"},
	{2, 0x57,0x00, BYTE_2_DATA, &reg_no, 0x00, 0x00, "OFFI A, $data"},	
	{3, 0x74,0x58, BYTE_3_DATA, &reg_r, 0x00, 0x07, "OFFI $reg, $data"},	
	{3, 0x64,0x58, BYTE_3_DATA, &reg_sr2, 0x00, 0x87, "OFFI $reg, $data"},	
	{3, 0x74,0xC0, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "ADDW $offset"},		
	{3, 0x74,0xD0, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "ADCW $offset"},		
	{3, 0x74,0xA0, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "ADDNCW $offset"},		
	{3, 0x74,0xE0, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "SUBW $offset"},		
	{3, 0x74,0xF0, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "SBBW $offset"},		
	{3, 0x74,0xB0, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "SUBNBW $offset"},		
	{3, 0x74,0x88, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "ANAW $offset"},		
	{3, 0x74,0x98, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "ORAW $offset"},		
	{3, 0x74,0x90, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "XRAW $offset"},		
	{3, 0x74,0xA8, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "GTAW $offset"},		
	{3, 0x74,0xB8, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "LTAW $offset"},		
	{3, 0x74,0xE8, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "NEAW $offset"},		
	{3, 0x74,0xF8, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "EQAW $offset"},		
	{3, 0x74,0xC8, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "ONAW $offset"},		
	{3, 0x74,0xD8, BYTE_3_OFFSET, &reg_no, 0x00, 0x00, "OFFAW $offset"},		
	{3, 0x05,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "ANIW $offset, $data"},	
	{3, 0x15,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "ORIW $offset, $data"},	
	{3, 0x25,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "GTIW $offset, $data"},	
	{3, 0x35,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "LTIW $offset, $data"},	
	{3, 0x65,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "NEIW $offset, $data"},	
	{3, 0x75,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "EQIW $offset, $data"},	
	{3, 0x45,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "ONIW $offset, $data"},	
	{3, 0x55,0x00, BYTE_2_OFFSET_3_DATA, &reg_no, 0x00, 0x00, "OFFIW $offset, $data"},	
	{2, 0x70,0x40, NO_ARGS, &reg_r2, 0x00, 0x03, "EADD EA, $reg"},		
	{2, 0x74,0xC4, NO_ARGS, &reg_rp3, 0x00, 0x03, "DADD EA, $reg"},		
	{2, 0x74,0xD4, NO_ARGS, &reg_rp3, 0x00, 0x03, "DADC EA, $reg"},		
	{2, 0x74,0xA4, NO_ARGS, &reg_rp3, 0x00, 0x03, "DADDNC EA, $reg"},		
	{2, 0x70,0x60, NO_ARGS, &reg_r2, 0x00, 0x03, "ESUB EA, $reg"},		
	{2, 0x74,0xE4, NO_ARGS, &reg_rp3, 0x00, 0x03, "DSUB EA, $reg"},		
	{2, 0x74,0xF4, NO_ARGS, &reg_rp3, 0x00, 0x03, "DSBB EA, $reg"},		
	{2, 0x74,0xB4, NO_ARGS, &reg_rp3, 0x00, 0x03, "DSUBNB EA, $reg"},		
	{2, 0x74,0x8C, NO_ARGS, &reg_rp3, 0x00, 0x03, "DAN EA, $reg"},		
	{2, 0x74,0x9C, NO_ARGS, &reg_rp3, 0x00, 0x03, "DOR EA, $reg"},		
	{2, 0x74,0x94, NO_ARGS, &reg_rp3, 0x00, 0x03, "DXR EA, $reg"},		
	{2, 0x74,0xAC, NO_ARGS, &reg_rp3, 0x00, 0x03, "DGT EA, $reg"},		
	{2, 0x74,0xBC, NO_ARGS, &reg_rp3, 0x00, 0x03, "DLT EA, $reg"},		
	{2, 0x74,0xEC, NO_ARGS, &reg_rp3, 0x00, 0x03, "DNE EA, $reg"},		
	{2, 0x74,0xFC, NO_ARGS, &reg_rp3, 0x00, 0x03, "DEQ EA, $reg"},		
	{2, 0x74,0xCC, NO_ARGS, &reg_rp3, 0x00, 0x03, "DON EA, $reg"},		
	{2, 0x74,0xDC, NO_ARGS, &reg_rp3, 0x00, 0x03, "DOFF EA, $reg"},		
	{2, 0x48,0x2C, NO_ARGS, &reg_r2, 0x00, 0x03, "MUL $reg"},		
	{2, 0x48,0x3C, NO_ARGS, &reg_r2, 0x00, 0x03, "DIV $reg"},		
	{1, 0x40,0x00, NO_ARGS, &reg_r2, 0x03, 0x00, "INR $reg"},		
	{2, 0x20,0x00, BYTE_2_OFFSET, &reg_no, 0x00, 0x00, "INRW $offset"},		
	{1, 0x02,0x00, NO_ARGS, &reg_rp, 0x30, 0x00, "INX $reg"},		
	{1, 0xA8,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "INX EA"},		
	{1, 0x50,0x00, NO_ARGS, &reg_r2, 0x03, 0x00, "DCR $reg"},		
	{2, 0x30,0x00, BYTE_2_OFFSET, &reg_no, 0x00, 0x00, "DCRW $offset"},		
	{1, 0x03,0x00, NO_ARGS, &reg_rp, 0x30, 0x00, "DCX $reg"},		
	{1, 0xA9,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "DCX EA"},		
	{1, 0x61,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "DAA"},		
	{2, 0x48,0x2B, NO_ARGS, &reg_no, 0x00, 0x00, "STC"},		
	{2, 0x48,0x2A, NO_ARGS, &reg_no, 0x00, 0x00, "CLC"},		
	{2, 0x48,0x3A, NO_ARGS, &reg_no, 0x00, 0x00, "NEGA"},		
	{2, 0x48,0x38, NO_ARGS, &reg_no, 0x00, 0x00, "RLD"},		
	{2, 0x48,0x39, NO_ARGS, &reg_no, 0x00, 0x00, "RRD"},		
	{2, 0x48,0x34, NO_ARGS, &reg_r2, 0x00, 0x03, "RLL $reg"},		
	{2, 0x48,0x30, NO_ARGS, &reg_r2, 0x00, 0x03, "RLR $reg"},		
	{2, 0x48,0x24, NO_ARGS, &reg_r2, 0x00, 0x03, "SLL $reg"},		
	{2, 0x48,0x20, NO_ARGS, &reg_r2, 0x00, 0x03, "SLR $reg"},		
	{2, 0x48,0x04, NO_ARGS, &reg_r2, 0x00, 0x03, "SLLC $reg"},		
	{2, 0x48,0x00, NO_ARGS, &reg_r2, 0x00, 0x03, "SLRC $reg"},		
	{2, 0x48,0xB4, NO_ARGS, &reg_no, 0x00, 0x00, "DRLL EA"},		
	{2, 0x48,0xB0, NO_ARGS, &reg_no, 0x00, 0x00, "DRLR EA"},		
	{2, 0x48,0xA4, NO_ARGS, &reg_no, 0x00, 0x00, "DSLL EA"},		
	{2, 0x48,0xA0, NO_ARGS, &reg_no, 0x00, 0x00, "DSLR EA"},		
	{3, 0x54,0x00, WORD_2_3_ADDR, &reg_no, 0x00, 0x00, "JMP $addr"},		
	{1, 0x21,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "JB"},		
	{1, 0xC0,0x00, MASK_JDISP, &reg_no, 0x3F, 0x00, "JR $disp"},		
	{2, 0x4E,0x00, MASK_JDISP, &reg_no, 0x01, 0xFF, "JRE $disp"},		
	{2, 0x48,0x28, NO_ARGS, &reg_no, 0x00, 0x00, "JEA"},		
	{3, 0x40,0x28, WORD_2_3_ADDR, &reg_no, 0x00, 0x00, "CALL $addr"},		
	{2, 0x48,0x29, NO_ARGS, &reg_no, 0x00, 0x00, "CALB"},		
	{2, 0x78,0x00, MASK_FIXED_ADDR, &reg_no, 0x07, 0xFF, "CALF $fa"},		
	{1, 0x80,0x00, MASK_TABLE_ADDR, &reg_no, 0x1F, 0x00, "CALT $ta"},		
	{1, 0x72,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "SOFTI"},		
	{1, 0xB8,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "RET"},		
	{1, 0xB9,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "RETS"},		
	{1, 0x62,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "RETI"},		
	{2, 0x58,0x00, BYTE_2_OFFSET_BIT_MASK, &reg_no, 0x07, 0x00, "BIT $bit, $offset"},		
	{2, 0x48,0x08, NO_ARGS, &reg_f, 0x00, 0x07, "SK $reg"},		
	{2, 0x48,0x18, NO_ARGS, &reg_f, 0x00, 0x07, "SKN $reg"},		
	{2, 0x48,0x40, NO_ARGS, &reg_irf, 0x00, 0x1F, "SKIT $reg"},		
	{2, 0x48,0x60, NO_ARGS, &reg_irf, 0x00, 0x1F, "SKIT $reg"},		
	{1, 0x00,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "NOP"},		
	{1, 0xAA,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "EI"},		
	{1, 0xBA,0x00, NO_ARGS, &reg_no, 0x00, 0x00, "DI"},		
	{2, 0x48,0x3B, NO_ARGS, &reg_no, 0x00, 0x00, "HLT"},		
	{2, 0x48,0xBB, NO_ARGS, &reg_no, 0x00, 0x00, "STOP"}
};


bool hasMaskedArgs(enum argType arg)
{
	if(	arg == BYTE_2_OFFSET_BIT_MASK ||
	   	arg == MASK_JDISP ||
	   	arg == MASK_FIXED_ADDR ||
	   	arg == MASK_TABLE_ADDR)
	   	
		return true;
	else
		return false;
}

bool has2ndMatchByte(enum argType arg)
{
	if(	arg == NO_ARGS ||
		arg == BYTE_3_DATA ||
		arg == BYTE_3_OFFSET ||
		arg == BYTE_3_DATA_OPT ||
		arg == WORD_3_4_ADDR ||
		arg == MASK_JDISP ||
		arg == MASK_FIXED_ADDR ||
		arg == MASK_TABLE_ADDR )
		return true;
	else
		return false;	
}

InstrList* initInstrSet(InstrGroup iset)
{
	InstrList* lst;
	int instrCount = iset.size();
	
	lst = new InstrList;
	
	for(int i = 0; i < instrCount; i++)
	{
		InstrListInsert(*lst, iset[i]);	
	}	
	
	return lst;
}


void InstrListInsert (InstrList& lst, Instr in)
{
	InstrList::iterator it;
	uint8_t masked1 = in.byte1 & ~(in.argmask1);
	uint8_t masked2 = in.byte2 & ~(in.argmask2);
		
	if(lst.empty())
	{
		lst.push_front(in);
	}else{
		for(it = lst.begin(); it != lst.end(); it++)
		{
			//check first opcode and mask
			if(masked1 < ((*it).byte1 & ~((*it).argmask1))) //just stop and insert here
			{
				break;
			}else if (masked1 == ((*it).byte1 & ~((*it).argmask1))) //byte 1 same, check byte2
			{
				if(in.length == 1)	//only 1 byte, just insert
					break;
				if(masked2 < ((*it).byte2 & ~((*it).argmask2))) 
					break;
			}
		}
		lst.insert(it,in);
	}
	
}













